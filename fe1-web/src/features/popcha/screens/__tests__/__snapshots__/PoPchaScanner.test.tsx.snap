// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`PoPcha scanner closed scanner renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
      "overflow": "hidden",
    }
  }
>
  <View
    style={
      {
        "bottom": 0,
        "left": 0,
        "position": "absolute",
        "right": 0,
        "top": 0,
        "zIndex": 0,
      }
    }
  />
  <View
    style={
      {
        "flex": 1,
        "flexDirection": "column",
        "margin": 16,
      }
    }
  >
    <View
      style={
        {
          "bottom": 0,
          "flex": 1,
        }
      }
    >
      <View
        style={
          {
            "alignItems": "center",
            "flex": 1,
            "justifyContent": "space-between",
          }
        }
      >
        <View>
          <Text
            style={
              {
                "color": "#000",
                "fontSize": 20,
                "lineHeight": 26,
                "marginBottom": 16,
                "textAlign": "left",
              }
            }
          >
            Hello, here is your laoID: 
            -
            M
            2
            5
            9
            c
            5
            J
            l
            a
            k
            L
            V
            l
            X
            B
            R
            a
            8
            9
            3
            p
            c
            E
            -
            4
            s
            7
            s
            s
            O
            8
            J
            v
            5
            g
            X
            O
            v
            t
            r
            e
            E
            =
          </Text>
          <text />
        </View>
        <View>
          <View
            style={
              {
                "backgroundColor": "#fff",
                "borderRadius": 8,
                "padding": 8,
              }
            }
          >
            <View
              accessible={true}
              collapsable={false}
              focusable={true}
              onBlur={[Function]}
              onClick={[Function]}
              onFocus={[Function]}
              onResponderGrant={[Function]}
              onResponderMove={[Function]}
              onResponderRelease={[Function]}
              onResponderTerminate={[Function]}
              onResponderTerminationRequest={[Function]}
              onStartShouldSetResponder={[Function]}
              testID="popcha_scanner_button"
            >
              <RNGestureHandlerButton
                collapsable={false}
                delayLongPress={600}
                enabled={true}
                exclusive={true}
                handlerTag={1}
                handlerType="NativeViewGestureHandler"
                onGestureEvent={[Function]}
                onGestureHandlerEvent={[Function]}
                onGestureHandlerStateChange={[Function]}
                onHandlerStateChange={[Function]}
                rippleColor={0}
                touchSoundDisabled={false}
              >
                <View
                  accessible={true}
                  collapsable={false}
                  style={
                    {
                      "opacity": 1,
                    }
                  }
                >
                  <Text
                    style={
                      [
                        {
                          "color": "#000",
                          "fontSize": 20,
                          "lineHeight": 26,
                          "textAlign": "left",
                        },
                        {
                          "color": "#3742fa",
                        },
                      ]
                    }
                  >
                    Open Scanner
                  </Text>
                </View>
              </RNGestureHandlerButton>
            </View>
          </View>
        </View>
      </View>
    </View>
    <View
      style={
        {
          "flexDirection": "column",
        }
      }
    >
      <View
        style={
          {
            "alignSelf": "flex-end",
            "backgroundColor": "#fff",
            "borderRadius": 8,
            "padding": 8,
          }
        }
      >
        <View
          accessible={true}
          collapsable={false}
          focusable={true}
          onBlur={[Function]}
          onClick={[Function]}
          onFocus={[Function]}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
        >
          <RNGestureHandlerButton
            collapsable={false}
            delayLongPress={600}
            enabled={true}
            exclusive={true}
            handlerTag={2}
            handlerType="NativeViewGestureHandler"
            onGestureEvent={[Function]}
            onGestureHandlerEvent={[Function]}
            onGestureHandlerStateChange={[Function]}
            onHandlerStateChange={[Function]}
            rippleColor={0}
            touchSoundDisabled={false}
          >
            <View
              accessible={true}
              collapsable={false}
              style={
                {
                  "alignSelf": "flex-end",
                  "marginLeft": "auto",
                  "opacity": 1,
                }
              }
            >
              <View>
                {"name":"ios-camera-reverse","size":25,"color":"#3742fa"}
              </View>
            </View>
          </RNGestureHandlerButton>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`PoPcha scanner renders correctly 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RCTScrollView
    collapsable={false}
    handlerTag={1}
    handlerType="NativeViewGestureHandler"
    onGestureHandlerEvent={[Function]}
    onGestureHandlerStateChange={[Function]}
    style={
      {
        "padding": 16,
      }
    }
    waitFor={
      [
        {
          "current": null,
        },
      ]
    }
  >
    <View>
      <View>
        <Text
          style={
            {
              "color": "#000",
              "fontSize": 20,
              "lineHeight": 26,
              "marginBottom": 16,
              "textAlign": "left",
            }
          }
        >
          Hello, here is your laoID: 
          -
          M
          2
          5
          9
          c
          5
          J
          l
          a
          k
          L
          V
          l
          X
          B
          R
          a
          8
          9
          3
          p
          c
          E
          -
          4
          s
          7
          s
          s
          O
          8
          J
          v
          5
          g
          X
          O
          v
          t
          r
          e
          E
          =
        </Text>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
