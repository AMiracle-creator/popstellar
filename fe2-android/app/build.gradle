apply plugin: 'com.android.application'
apply plugin: 'org.sonarqube'
apply plugin: 'jacoco'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.github.dedis.popstellar"
        minSdkVersion 26
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "com.github.dedis.popstellar.HiltTestRunner"

        // The following feature is not working properly with the coverage on the current build version
        // As it's purpose is to clear physical data between each tests, its is not used yet.
        // Let's hope the feature will be fixed before we actually need it.

        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        // testInstrumentationRunnerArguments clearPackageData: 'true'

        buildTypes {
            debug {
                isDefault true
                testCoverageEnabled true
            }

            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        // Enable data binding library for the project
        // For more information : https://developer.android.com/topic/libraries/data-binding
        buildFeatures {
            dataBinding true
        }

        testOptions {
            execution 'ANDROIDX_TEST_ORCHESTRATOR'
            animationsDisabled true

            unitTests {
                returnDefaultValues true
                includeAndroidResources true
            }
        }
    }

    // Add the common test sources to the project
    sourceSets
        .findAll { it.name.toLowerCase().contains("test") }
        .forEach {
            it.java.srcDirs += file("$project.projectDir/src/test/common")
        }
}

// Jacoco setup - This handles the code coverage of the tests
jacoco {
    toolVersion = "0.8.7"
}

tasks.withType(Test) {
    jacoco {
        includeNoLocationClasses = true
        excludes = ['jdk.internal.*'] // Allows it to run on Java 11
    }
}

// Sonarqube configuration - used to produce the analysis for SonarCloud
sonarqube {
    properties {
        property "sonar.projectKey", "dedis_student_21_pop_fe2"
        property "sonar.projectName", "PoP - Fe2-Android"
        property "sonar.organization", "dedis"
        property "sonar.host.url", "https://sonarcloud.io"
        // Comma-separated paths to the various directories containing the *.xml JUnit report files. Each path may be absolute or relative to the project base directory.
        property "sonar.junit.reportPaths", "${project.buildDir}/test-results/testMockDebugUnitTest/,${project.buildDir}/outputs/androidTest-results/connected/flavors/mock/"
        // Paths to xml files with Android Lint issues. If the main flavor is changed, this file will have to be changed too.
        property "sonar.androidLint.reportPaths", "${project.buildDir}/reports/lint-results-prodDebug.xml"
        // Paths to JaCoCo XML coverage report files.
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/jacocoTestReport/jacocoTestReport.xml"
    }
}

dependencies {
    // Android Layout
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.1.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    // Android others
    implementation "androidx.lifecycle:lifecycle-reactivestreams:2.4.0"
    // Hilt
    def hilt_version = "2.38.1"
    implementation "com.google.dagger:hilt-android:$hilt_version"
    annotationProcessor "com.google.dagger:hilt-compiler:$hilt_version"
    androidTestImplementation "com.google.dagger:hilt-android-testing:$hilt_version"
    androidTestAnnotationProcessor "com.google.dagger:hilt-android-compiler:$hilt_version"
    // Security
    implementation "androidx.security:security-crypto:1.1.0-alpha03"
    implementation 'net.i2p.crypto:eddsa:0.3.0'
    implementation 'org.bouncycastle:bcpkix-jdk15on:1.65'
    implementation 'io.github.novacrypto:BIP39:2019.01.27'
    implementation 'com.google.crypto.tink:tink-android:1.5.0'
    // QRCode
    implementation 'com.github.kenglxn.QRGen:android:2.6.0'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    // Json
    implementation 'com.google.code.gson:gson:2.8.6'
    implementation 'com.networknt:json-schema-validator:1.0.64'
    // WebSocket
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.1'
    def scarlet_version = "0.1.11"
    implementation "com.tinder.scarlet:scarlet:$scarlet_version"
    implementation "com.tinder.scarlet:message-adapter-gson:$scarlet_version"
    implementation "com.tinder.scarlet:stream-adapter-rxjava2:$scarlet_version"
    implementation "com.tinder.scarlet:websocket-okhttp:$scarlet_version"
    implementation "com.tinder.scarlet:lifecycle-android:$scarlet_version"
    implementation 'me.relex:circleindicator:2.1.6'
    // Database
    def room_version = "2.4.1"
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    // RxJava
    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.21'

    // Test framework
    testImplementation 'junit:junit:4.13.2'
    debugImplementation "androidx.fragment:fragment-testing:1.4.1"
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.android.support.test.espresso:espresso-contrib:3.0.2'
    androidTestUtil 'androidx.test:orchestrator:1.4.1'
    // Mockito
    testImplementation 'org.mockito:mockito-core:3.9.0'
    androidTestImplementation 'org.mockito:mockito-android:3.9.0'
}

delete 'src/main/resources/protocol'

copy {
    from '../../protocol'
    into 'src/main/resources/protocol'

    include 'answer/**'
    include 'examples/**'
    include 'qrcode/**'
    include 'query/**'
    include 'jsonRPC.json'

    // Replace the remote part of the base URL ($id) to the local resource path
    // This modification is done to force the use of local files when loading json sub-schemas ($ref)
    // https://json-schema.org/understanding-json-schema/structuring.html#base-uri

    filteringCharset = 'UTF-8'
    filter {
        String line -> line.replaceAll("https://raw\\.githubusercontent\\.com/dedis/[a-zA-Z0-9_-]+/master/", "resource:/")
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
        '**/R.class',
        '**/R$*.class',
        '**/BuildConfig.*',
        '**/Manifest*.*',
        '**/*Test*.*',
        'androidx/**/*.*',
        // Exclude Hilt generated classes
        '*_*Factory.class',
        '*_ComponentTreeDeps.class',
        '*_Factory.class',
        '*_GeneratedInjector.class',
        '*_HiltComponents.class',
        '*_HiltModules.class',
        '*_HiltModules_BindsModule.class',
        '*_HiltModules_KeyModule.class',
        '*_MembersInjector.class',
        '*_ProvideFactory.class',
        '*_SingletonC.class',
        '*_TestComponentDataSupplier.class',
        'BR.class',
        'BuildConfig.class',
        'DataBinderMapperImpl.class',
        'Hilt_*.class',
        '_test_*.class'
    ]
    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug/classes", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: project.buildDir, includes: [
        'outputs/unit_test_code_coverage/*/*.exec',
        'outputs/code_coverage/*/connected/**/*.ec',
    ]))
}
