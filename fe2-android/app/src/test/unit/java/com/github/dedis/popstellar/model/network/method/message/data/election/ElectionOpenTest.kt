package com.github.dedis.popstellar.model.network.method.message.data.election

import androidx.test.ext.junit.runners.AndroidJUnit4
import com.github.dedis.popstellar.model.network.JsonTestUtils.loadFile
import com.github.dedis.popstellar.model.network.JsonTestUtils.parse
import com.github.dedis.popstellar.model.network.JsonTestUtils.testData
import com.github.dedis.popstellar.model.objects.Election.Companion.generateElectionSetupId
import com.github.dedis.popstellar.model.objects.Lao.Companion.generateLaoId
import com.github.dedis.popstellar.testutils.Base64DataUtils
import com.google.gson.JsonParseException
import java.time.Instant
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(AndroidJUnit4::class)
class ElectionOpenTest {
  @Test
  fun laoIdTest() {
    Assert.assertEquals(LAO_ID, ELECTION_OPEN.laoId)
  }

  @Test
  fun electionIdTest() {
    Assert.assertEquals(ELECTION_ID, ELECTION_OPEN.electionId)
  }

  @Test
  fun openedAtTest() {
    Assert.assertEquals(OPENED_AT, ELECTION_OPEN.openedAt)
  }

  @Test(expected = IllegalArgumentException::class)
  fun constructorFailsLaoIdNotBase64Test() {
    ElectionOpen("not base 64", ELECTION_ID, OPENED_AT)
  }

  @Test(expected = IllegalArgumentException::class)
  fun constructorFailsElectionIdNotBase64Test() {
    ElectionOpen(ELECTION_ID, "not base 64", OPENED_AT)
  }

  @Test(expected = IllegalArgumentException::class)
  fun constructorFailsOpenedTimeTooOld() {
    ElectionOpen(LAO_ID, ELECTION_ID, 1)
  }

  @Test(expected = IllegalArgumentException::class)
  fun constructorFailsOpenedTimeInFuture() {
    ElectionOpen(LAO_ID, ELECTION_ID, CREATION + 1000)
  }

  @Test
  fun equalsTest() {
    val electionOpen2 = ElectionOpen(LAO_ID, ELECTION_ID, OPENED_AT)
    Assert.assertEquals(ELECTION_OPEN, electionOpen2)
    Assert.assertEquals(ELECTION_OPEN, ELECTION_OPEN)
    Assert.assertEquals(ELECTION_OPEN.hashCode().toLong(), electionOpen2.hashCode().toLong())

    val random = generateLaoId(ORGANIZER, CREATION + 1, NAME)

    Assert.assertNotEquals(ELECTION_OPEN, ElectionOpen(random, ELECTION_ID, OPENED_AT))
    Assert.assertNotEquals(ELECTION_OPEN, ElectionOpen(LAO_ID, random, OPENED_AT))
    Assert.assertNotEquals(ELECTION_OPEN, ElectionOpen(LAO_ID, ELECTION_ID, CREATION - 1))
    Assert.assertNotEquals(ELECTION_OPEN, null)
  }

  @Test
  fun toStringTest() {
    Assert.assertEquals(
      "ElectionOpen{lao='$LAO_ID', election='$ELECTION_ID', opened_at=$CREATION}",
      ELECTION_OPEN.toString()
    )
  }

  @Test
  fun jsonValidationTest() {
    testData(ELECTION_OPEN)
    val pathDir = "protocol/examples/messageData/election_open/"
    val jsonValid1 = loadFile(pathDir + "election_open.json")
    parse(jsonValid1)

    val jsonInvalid1 = loadFile(pathDir + "bad_election_open_opened_at_negative.json")
    Assert.assertThrows(JsonParseException::class.java) { parse(jsonInvalid1) }
  }

  companion object {
    // Hardcoded strings for election
    private val ORGANIZER = Base64DataUtils.generatePublicKey()
    private val CREATION = Instant.now().epochSecond
    private const val NAME = "Lao name"
    private val OPENED_AT = CREATION
    private val LAO_ID = generateLaoId(ORGANIZER, CREATION, NAME)
    private val ELECTION_ID = generateElectionSetupId(LAO_ID, CREATION, NAME)
    private val ELECTION_OPEN = ElectionOpen(LAO_ID, ELECTION_ID, OPENED_AT)
  }
}
